(function() {var implementors = {};
implementors["bitvec"] = [{"text":"impl&lt;O:&nbsp;Copy, V:&nbsp;Copy&gt; Copy for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: BitView + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Copy for BitDomain&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Copy for Domain&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Copy&gt; Copy for BitIdx&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: BitMemory,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Copy&gt; Copy for BitTail&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: BitMemory,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Copy&gt; Copy for BitPos&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: BitMemory,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Copy&gt; Copy for BitSel&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: BitMemory,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Copy&gt; Copy for BitMask&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: BitMemory,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Msb0","synthetic":false,"types":[]},{"text":"impl Copy for Lsb0","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Copy for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Copy for MacError","synthetic":false,"types":[]},{"text":"impl Copy for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Copy for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["ecdsa"] = [{"text":"impl&lt;C:&nbsp;Copy&gt; Copy for VerifyingKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;AffinePoint&lt;C&gt;: Copy + Clone + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Copy for Signature&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + CheckSignatureBytes,<br>&nbsp;&nbsp;&nbsp;&nbsp;SignatureSize&lt;C&gt;: ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;SignatureSize&lt;C&gt; as ArrayLength&lt;u8&gt;&gt;::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["elliptic_curve"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Copy for EncodedPoint&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve,<br>&nbsp;&nbsp;&nbsp;&nbsp;UntaggedPointSize&lt;C&gt;: Add&lt;U1&gt; + ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UncompressedPointSize&lt;C&gt;: ArrayLength&lt;u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;UncompressedPointSize&lt;C&gt; as ArrayLength&lt;u8&gt;&gt;::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, C:&nbsp;Copy + Curve&gt; Copy for Coordinates&lt;'a, C&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Tag","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Copy for PublicKey&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;AffinePoint&lt;C&gt;: Copy + Clone + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C&gt; Copy for NonZeroScalar&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Curve + ProjectiveArithmetic,<br>&nbsp;&nbsp;&nbsp;&nbsp;FieldBytes&lt;C&gt;: From&lt;Scalar&lt;C&gt;&gt; + for&lt;'r&gt; From&lt;&amp;'r Scalar&lt;C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Scalar&lt;C&gt;: PrimeField&lt;Repr = FieldBytes&lt;C&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Copy, N&gt; Copy for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["p256"] = [{"text":"impl Copy for AffinePoint","synthetic":false,"types":[]},{"text":"impl Copy for ProjectivePoint","synthetic":false,"types":[]},{"text":"impl Copy for Scalar","synthetic":false,"types":[]}];
implementors["p256_cortex_m4"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["p256_cortex_m4_sys"] = [{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for SignPrecomp","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Copy for Choice","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CtOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()