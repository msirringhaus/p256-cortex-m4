initSidebarItems({"mod":[["consts","Type aliases for many constants."],["ecdh","Elliptic Curve Diffie-Hellman Support."],["ops","Traits for arithmetic operations on elliptic curve field elements."],["sec1","SEC1 encoding support."],["util","Arithmetic helper functions designed for efficient LLVM lowering."],["weierstrass","Elliptic curves in short Weierstrass form."]],"struct":[["Error","Elliptic curve errors."],["NonZeroScalar","Non-zero scalar type."],["PublicKey","Elliptic curve public keys."],["ScalarBytes","Scalar bytes: wrapper for [`FieldBytes`] which guarantees that the the inner byte value is within range of the curve's [`Order`]."],["SecretBytes","Newtype wrapper for [`FieldBytes`] which impls [`Zeroize`]."],["SecretKey","Elliptic curve secret keys."]],"trait":[["Curve","Elliptic curve."],["Field","This trait represents an element of a field."],["Group","This trait represents an element of a cryptographic group."],["Order","Order of an elliptic curve group."],["ProjectiveArithmetic","Elliptic curve with projective arithmetic implementation."],["SecretValue","Inner value stored by a [`SecretKey`]."]],"type":[["AffinePoint","Affine point type for a given curve with a [`ProjectiveArithmetic`] implementation."],["FieldBytes","Byte representation of a base/scalar field element of a given curve."],["ProjectivePoint","Projective point type for a given curve with a [`ProjectiveArithmetic`] implementation."],["Result","Result type."],["Scalar","Scalar field element for a particular elliptic curve."],["ScalarBits","Bit representation of a scalar field element of a given curve."]]});